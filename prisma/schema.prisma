// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// mysql://root:ajouuniversity@bom-backend.c5e6sfujwd1g.ap-northeast-2.rds.amazonaws.com:3306/damoyeo

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:ajouuniversity@bom-backend.c5e6sfujwd1g.ap-northeast-2.rds.amazonaws.com:3306/damoyeo"
}

model User {
	userId				Int			@default(autoincrement()) @id
	emailId 			String 		@unique @db.VarChar(45)
	userName			String		@db.VarChar(45)
	password 			String		@db.VarChar(45)
	nickname 			String		@db.VarChar(45)
	birth 				DateTime	
	phoneNum 			String		@db.VarChar(45)
	grade 				Int
	star 				Int			@default(0)
	timeItem 			Int			@default(0)
	passItem 			Int			@default(0)
	introduction		String?
	platform 			String?
	platformId			String?		@db.VarChar(255)
	lock				Boolean		@default(false)
	lockFreeDate		DateTime?
	userType			Int			@default(0)      // 0 -> user, 1 -> administrator, 2-> platform
	characterId			Int			@default(1)
	sessions			Session[]
	character			Character		@relation(fields: [characterId], references: [characterId])
	daily				Daily[]
	categories			Category[]
	receivedMessages	Message[]			@relation("receive")
	sentMessages		Message[]			@relation("send")
	sentReports			Report[]			@relation("report")
	receivedReports		Report[]			@relation("reported")
	reportLogs			ReportLog[]
	mockDB				MockDB[]
	oxDB				OXDB[]
	rooms				Room[]
	questAttempts		QuestAttempt[]
	fromFollowers		Follower[]			@relation("from")
	toFollowers			Follower[]			@relation("to")
	posts				Post[]
	comments			Comment[]
	collections			Collection[]
	likes				Like[]
	scraps				Scrap[]
	planDays			PlanDay[]
}

model Daily {
	dailyId				Int			@default(autoincrement()) @id
	date				DateTime
	obtainedStar		Int			@default(0)
	userId				Int
	user				User		@relation(fields: [userId], references: [userId], onDelete: Cascade)
	plans				Plan[]
}

model Category {
	categoryId			Int			@default(autoincrement()) @id
	categoryName		String		@db.VarChar(45)
	color				String		@db.VarChar(45)
	type				Boolean		@default(false)
	userId				Int?
	plan				Plan[]
	user				User?		@relation(fields: [userId], references: [userId], onDelete: Cascade)
	post				Post[]
}

model Plan {
	planId				Int			@default(autoincrement()) @id
	planName			String		@db.VarChar(45)
	time				Int			@default(0)
	check				Boolean		@default(false)
	repetitionType		Int?		// 0 -> default, 1 -> 매일 반복, 2-> 매주 반복
	dailyId				Int
	categoryId			Int
	daily				Daily		@relation(fields: [dailyId], references: [dailyId])
	category			Category	@relation(fields: [categoryId], references: [categoryId])
	planDays			PlanDay[]
}

model Message {
	messageId			Int			@default(autoincrement()) @id
	sendDate			DateTime
	contents			String		@db.VarChar(45)
	readCheck			Boolean 	@default(false)
	recvId				Int
	sentId				Int
	receiver			User		@relation(name: "receive", fields: [recvId], references: [userId])
	sender				User		@relation(name: "send", fields: [sentId], references: [userId])
}

model Session {
	sessionId			Int			@default(autoincrement()) @id
	createdAt			DateTime	@default(now())
	user				User		@relation(fields: [userId], references: [userId], onDelete: Cascade)
	userId				Int
}

model Report {
	reportId			Int			@default(autoincrement()) @id
	contents			String?
	reportType			Int
	accept				Boolean		@default(false)
	reportUser			Int
	reportedUser		Int
	reportedPost		Int?
	reporter			User		@relation(name: "report", fields: [reportUser], references: [userId])
	receiver			User		@relation(name: "reported", fields: [reportedUser], references: [userId])
	reportLog			ReportLog?
	post				Post?		@relation(fields: [reportedPost], references: [postId])
}

model ReportLog {
	reportLogId			Int			@default(autoincrement()) @id
	disciplinaryAction	Int			@default(0) // 징계 내용을 적어야함
	reportId			Int
	adminId				Int
	user				User		@relation(fields: [adminId], references: [userId])
	report				Report?		@relation(fields: [reportId], references: [reportId])
}

model Character {
	characterId			Int			@default(autoincrement()) @id
	characterName		String		@db.VarChar(45)
	star				Int
	imageUrl			String		@db.Text
	silhouetteUrl		String		@db.Text
	introduction		String		@db.Text
	explanation			String		@db.Text
	brain				Int
	speed				Int
	power				Int
	teq					Int
	strength			Int
	height				Int
	weight				Int
	mbti				String		@db.VarChar(45)	
	user				User[]
	collections			Collection[]
}

model MockDB {
	mockquestionId		Int			@default(autoincrement()) @id
	grade				Int
	subject				String		@db.VarChar(45)
	questionImage		String		@db.Text
	answer				String		@db.VarChar(45)
	explanation			String		@db.Text
	provisionCheck		Boolean		@default(false)
	totalNumSolved		Int			@default(0)
	correctNum			Int			@default(0)
	provider			Int
	user				User		@relation(fields: [provider], references: [userId])
	questAttempt		QuestAttempt[]
}

model OXDB {
	oxquestionId		Int			@default(autoincrement()) @id
	oxquestion			String		@db.VarChar(45)
	oxanswer			String		@db.VarChar(45)
	subject				String		@db.VarChar(45)
	grade				Int
	range				Int
	totalNumSolved		Int			@default(0)
	correctNum			Int			@default(0)
	provider			Int
	user				User		@relation(fields: [provider], references: [userId])
}

model SketchDB {
	sketchquestionId	Int			@default(autoincrement()) @id
	sketchword			String		@db.VarChar(45)
	subject				String		@db.VarChar(45)
	description			String		@db.VarChar(255)
}

model Room {
	roomId				Int			@default(autoincrement()) @id
	roomName			String		@db.VarChar(45)
	kind				Int			// 1-> ox, 2-> 캐치마인드
	participantsNum		Int
	secretMode			Boolean		@default(false)
	password			String?		@db.VarChar(45)
	subject				String		@db.VarChar(45)
	userId				Int
	user				User		@relation(fields: [userId], references: [userId])
	oxUnitRange			OXUnitRange?
}

model QuestAttempt {
	questionId			Int
	userId				Int
	count				Int			@default(0)
	date				DateTime
	question			MockDB		@relation(fields: [questionId], references: [mockquestionId])
	user				User		@relation(fields: [userId], references: [userId], onDelete: Cascade)
	@@id([questionId, userId])
}

model Follower {
	fromId				Int
	toId				Int
	permission			Boolean		@default(false)
	fromUser			User		@relation(name: "from", fields: [fromId], references: [userId], onDelete: Cascade)
	toUser				User		@relation(name: "to", fields: [toId], references: [userId], onDelete: Cascade)
	@@id([fromId, toId])
}

model Post {
	postId				Int			@default(autoincrement()) @id
	title				String		@db.VarChar(45)
	content				String		@db.VarChar(150)
	createdAt			DateTime	@default(now())
	postKind			Int			// 1 -> 일상, 2 -> 공부		
	anonymous			Boolean		@default(false)
	categoryId			Int
	userId				Int
	category			Category	@relation(fields: [categoryId], references: [categoryId])
	user				User		@relation(fields: [userId], references: [userId])
	postContentUrls		PostContentUrl[]
	comments			Comment[]
	report				Report[]
	like				Like[]
	scrap				Scrap[]
}

model PostContentUrl {
	contentId			Int			@default(autoincrement()) @id
	contentUrl			String		@db.Text
	postId				Int
	post				Post		@relation(fields: [postId], references: [postId], onDelete: Cascade)
}

model Comment {
	commentId			Int			@default(autoincrement()) @id
	content				String		@db.Text
	createdAt			DateTime	@default(now())
	commentParent		Int?
	postId				Int
	userId				Int
	post				Post		@relation(fields: [postId], references: [postId], onDelete: Cascade)
	user				User		@relation(fields: [userId], references: [userId])
}

model OXUnitRange {
	id					Int			@default(autoincrement()) @id
	unit				Int
	roomId				Int
	room				Room		@relation(fields: [roomId], references: [roomId])
}

model Collection {
	userId				Int
	characterId			Int
	user				User		@relation(fields: [userId], references: [userId], onDelete: Cascade)
	character			Character	@relation(fields: [characterId], references: [characterId])
	@@id([userId, characterId])	
}

model Like {
	postId				Int
	userId				Int
	post				Post		@relation(fields: [postId], references: [postId], onDelete: Cascade)
	user				User		@relation(fields: [userId], references: [userId], onDelete: Cascade)
	@@id([postId, userId])
}

model Scrap {
	postId				Int
	userId				Int
	post				Post		@relation(fields: [postId], references: [postId], onDelete: Cascade)
	user				User		@relation(fields: [userId], references: [userId], onDelete: Cascade)
	@@id([postId, userId])
}

model PlanDay {
	planId				Int
	planName			String		@db.VarChar(45)
	year				Int			@default(0)
	month				Int			@default(0)
	day					Int			@default(0)
	dayId				Int			@default(0)
	userId				Int
	user				User		@relation(fields: [userId], references: [userId], onDelete: Cascade)
	plan				Plan		@relation(fields: [planId], references: [planId], onDelete: Cascade)	
	@@id([planId, day])
}